const express = require('express');
const QRCode = require('qrcode');
const { v4: uuidv4 } = require('uuid');
const db = require('../config/database');
const { authenticateToken, requireRole } = require('../middleware/auth');
const { sendNotification } = require('../bot/telegram-bot');
const router = express.Router();

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–∞–≥—Ä–∞–¥
router.get('/', async (req, res) => {
  try {
    const { category, limit = 50 } = req.query;

    let query = 'SELECT * FROM rewards WHERE is_active = true';
    const params = [];

    if (category) {
      query += ' AND category = $1';
      params.push(category);
    }

    query += ' ORDER BY points_cost ASC LIMIT $' + (params.length + 1);
    params.push(limit);

    const result = await db.query(query, params);

    res.json({
      success: true,
      rewards: result.rows
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
router.get('/:id', async (req, res) => {
  try {
    const result = await db.query(
      'SELECT * FROM rewards WHERE id = $1 AND is_active = true',
      [req.params.id]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ error: '–ù–∞–≥—Ä–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    res.json({
      success: true,
      reward: result.rows[0]
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û–±–º–µ–Ω –±–∞–ª–ª–æ–≤ –Ω–∞ –Ω–∞–≥—Ä–∞–¥—É
router.post('/:id/redeem', authenticateToken, async (req, res) => {
  const client = await db.pool.connect();
  
  try {
    await client.query('BEGIN');

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–≥—Ä–∞–¥–µ
    const rewardResult = await client.query(
      'SELECT * FROM rewards WHERE id = $1 AND is_active = true FOR UPDATE',
      [req.params.id]
    );

    if (rewardResult.rows.length === 0) {
      await client.query('ROLLBACK');
      return res.status(404).json({ error: '–ù–∞–≥—Ä–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    const reward = rewardResult.rows[0];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–∞ —Å–∫–ª–∞–¥–µ
    if (reward.stock_quantity !== null && reward.stock_quantity <= 0) {
      await client.query('ROLLBACK');
      return res.status(400).json({ error: '–ù–∞–≥—Ä–∞–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å' });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResult = await client.query(
      'SELECT points, telegram_id FROM users WHERE id = $1 FOR UPDATE',
      [req.user.id]
    );

    const user = userResult.rows[0];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –±–∞–ª–ª–æ–≤
    if (user.points < reward.points_cost) {
      await client.query('ROLLBACK');
      return res.status(400).json({ 
        error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤',
        required: reward.points_cost,
        available: user.points
      });
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞
    const qrCode = uuidv4();
    const qrCodeImage = await QRCode.toDataURL(qrCode);

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ–± –æ–±–º–µ–Ω–µ
    const redemptionResult = await client.query(
      `INSERT INTO reward_redemptions (user_id, reward_id, qr_code, points_spent, status)
       VALUES ($1, $2, $3, $4, 'pending')
       RETURNING *`,
      [req.user.id, reward.id, qrCode, reward.points_cost]
    );

    // –°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤
    await client.query(
      'UPDATE users SET points = points - $1 WHERE id = $2',
      [reward.points_cost, req.user.id]
    );

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    await client.query(
      `INSERT INTO transactions (user_id, type, points, description)
       VALUES ($1, 'reward_exchange', $2, $3)`,
      [req.user.id, -reward.points_cost, `–û–±–º–µ–Ω –Ω–∞: ${reward.title}`]
    );

    // –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
    if (reward.stock_quantity !== null) {
      await client.query(
        'UPDATE rewards SET stock_quantity = stock_quantity - 1 WHERE id = $1',
        [reward.id]
      );
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await client.query(
      `INSERT INTO notifications (user_id, title, message, type)
       VALUES ($1, $2, $3, $4)`,
      [
        req.user.id,
        '–ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞! üéÅ',
        `–í—ã –æ–±–º–µ–Ω—è–ª–∏ ${reward.points_cost} –±–∞–ª–ª–æ–≤ –Ω–∞ "${reward.title}"`,
        'reward_available'
      ]
    );

    await client.query('COMMIT');

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
    sendNotification(
      user.telegram_id,
      `üéÅ –ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n` +
      `–í—ã –æ–±–º–µ–Ω—è–ª–∏ ${reward.points_cost} –±–∞–ª–ª–æ–≤ –Ω–∞:\n"${reward.title}"\n\n` +
      `–ü–æ–∫–∞–∂–∏—Ç–µ QR-–∫–æ–¥ –∫–∞—Å—Å–∏—Ä—É –≤ –º–∞–≥–∞–∑–∏–Ω–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã.\n\n` +
      `üì± QR-–∫–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏`
    );

    res.json({
      success: true,
      redemption: {
        ...redemptionResult.rows[0],
        reward_title: reward.title,
        qr_code_image: qrCodeImage
      }
    });
  } catch (error) {
    await client.query('ROLLBACK');
    console.error('–û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥—ã:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  } finally {
    client.release();
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±–º–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/redemptions/my', authenticateToken, async (req, res) => {
  try {
    const result = await db.query(
      `SELECT rr.*, r.title as reward_title, r.description as reward_description,
              r.image_url, s.name as store_name
       FROM reward_redemptions rr
       JOIN rewards r ON rr.reward_id = r.id
       LEFT JOIN stores s ON rr.store_id = s.id
       WHERE rr.user_id = $1
       ORDER BY rr.created_at DESC`,
      [req.user.id]
    );

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–æ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±–º–µ–Ω–æ–≤
    const redemptions = await Promise.all(
      result.rows.map(async (redemption) => {
        if (redemption.status === 'pending') {
          const qrCodeImage = await QRCode.toDataURL(redemption.qr_code);
          return { ...redemption, qr_code_image: qrCodeImage };
        }
        return redemption;
      })
    );

    res.json({
      success: true,
      redemptions
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–º–µ–Ω–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–¥–∞—á–∏ –Ω–∞–≥—Ä–∞–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫–∞—Å—Å–∏—Ä–æ–≤)
router.post('/redemptions/:qr_code/confirm', authenticateToken, requireRole('cashier', 'admin'), async (req, res) => {
  const client = await db.pool.connect();
  
  try {
    await client.query('BEGIN');

    // –ü–æ–∏—Å–∫ –æ–±–º–µ–Ω–∞ –ø–æ QR-–∫–æ–¥—É
    const redemptionResult = await client.query(
      `SELECT rr.*, u.telegram_id 
       FROM reward_redemptions rr
       JOIN users u ON rr.user_id = u.id
       WHERE rr.qr_code = $1 AND rr.status = 'pending' FOR UPDATE`,
      [req.params.qr_code]
    );

    if (redemptionResult.rows.length === 0) {
      await client.query('ROLLBACK');
      return res.status(404).json({ error: '–û–±–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω' });
    }

    const redemption = redemptionResult.rows[0];

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±–º–µ–Ω–∞
    await client.query(
      `UPDATE reward_redemptions 
       SET status = 'completed', 
           store_id = $1,
           redeemed_at = CURRENT_TIMESTAMP
       WHERE id = $2`,
      [req.user.store_id, redemption.id]
    );

    // –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await client.query(
      `INSERT INTO notifications (user_id, title, message, type)
       VALUES ($1, $2, $3, $4)`,
      [
        redemption.user_id,
        '–ù–∞–≥—Ä–∞–¥–∞ –≤—ã–¥–∞–Ω–∞! ‚úÖ',
        '–í–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞',
        'reward_available'
      ]
    );

    await client.query('COMMIT');

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    sendNotification(
      redemption.telegram_id,
      `‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –≤—ã–¥–∞–Ω–∞!\n\n–í–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏!`
    );

    res.json({
      success: true,
      message: '–ù–∞–≥—Ä–∞–¥–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞'
    });
  } catch (error) {
    await client.query('ROLLBACK');
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–¥–∞—á–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  } finally {
    client.release();
  }
});

module.exports = router;
