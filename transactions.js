const express = require('express');
const db = require('../config/database');
const { authenticateToken, requireRole } = require('../middleware/auth');
const { sendNotification } = require('../bot/telegram-bot');
const router = express.Router();

// –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –∑–∞ –ø–æ–∫—É–ø–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫–∞—Å—Å–∏—Ä–æ–≤)
router.post('/purchase', authenticateToken, requireRole('cashier', 'admin'), async (req, res) => {
  const client = await db.pool.connect();
  
  try {
    const { user_telegram_id, receipt_number, amount } = req.body;

    if (!user_telegram_id || !amount) {
      return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã' });
    }

    await client.query('BEGIN');

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResult = await client.query(
      'SELECT id, telegram_id FROM users WHERE telegram_id = $1',
      [user_telegram_id]
    );

    if (userResult.rows.length === 0) {
      await client.query('ROLLBACK');
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const userId = userResult.rows[0].id;
    const telegramId = userResult.rows[0].telegram_id;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π
    const promotionResult = await client.query(
      `SELECT multiplier FROM promotions
       WHERE is_active = true 
       AND (store_id = $1 OR store_id IS NULL)
       AND start_date <= CURRENT_TIMESTAMP
       AND end_date >= CURRENT_TIMESTAMP
       ORDER BY multiplier DESC
       LIMIT 1`,
      [req.user.store_id]
    );

    const multiplier = promotionResult.rows.length > 0 
      ? parseFloat(promotionResult.rows[0].multiplier) 
      : 1.0;

    // –†–∞—Å—á–µ—Ç –±–∞–ª–ª–æ–≤
    const basePoints = Math.floor(amount / 100) * parseInt(process.env.POINTS_PER_PURCHASE || 10);
    const points = Math.floor(basePoints * multiplier);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await client.query(
      'UPDATE users SET points = points + $1 WHERE id = $2',
      [points, userId]
    );

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const transactionResult = await client.query(
      `INSERT INTO transactions (user_id, store_id, type, points, description, receipt_number, cashier_id)
       VALUES ($1, $2, 'purchase', $3, $4, $5, $6)
       RETURNING *`,
      [
        userId,
        req.user.store_id,
        points,
        `–ü–æ–∫—É–ø–∫–∞ –Ω–∞ —Å—É–º–º—É ${amount} —Ä—É–±.`,
        receipt_number,
        req.user.id
      ]
    );

    // –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await client.query(
      `INSERT INTO notifications (user_id, title, message, type)
       VALUES ($1, $2, $3, $4)`,
      [
        userId,
        '–ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã! üéâ',
        `–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${points} –±–∞–ª–ª–æ–≤ –∑–∞ –ø–æ–∫—É–ø–∫—É`,
        'points_earned'
      ]
    );

    await client.query('COMMIT');

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
    sendNotification(
      telegramId,
      `üéâ –ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã!\n\nüí∞ +${points} –±–∞–ª–ª–æ–≤ –∑–∞ –ø–æ–∫—É–ø–∫—É –Ω–∞ —Å—É–º–º—É ${amount} —Ä—É–±.\n` +
      (multiplier > 1 ? `üî• –ê–∫—Ü–∏—è —Ö${multiplier}!\n` : '') +
      `\nüì± –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –±–∞–ª–∞–Ω—Å`
    );

    res.json({
      success: true,
      transaction: transactionResult.rows[0],
      points_earned: points
    });
  } catch (error) {
    await client.query('ROLLBACK');
    console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –∑–∞ –ø–æ–∫—É–ø–∫—É:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  } finally {
    client.release();
  }
});

// –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –∑–∞ —Å–¥–∞—á—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫–∞—Å—Å–∏—Ä–æ–≤)
router.post('/device-return', authenticateToken, requireRole('cashier', 'admin'), async (req, res) => {
  const client = await db.pool.connect();
  
  try {
    const { user_telegram_id, device_type, brand, photo_url } = req.body;

    if (!user_telegram_id) {
      return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
    }

    await client.query('BEGIN');

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResult = await client.query(
      'SELECT id, telegram_id FROM users WHERE telegram_id = $1',
      [user_telegram_id]
    );

    if (userResult.rows.length === 0) {
      await client.query('ROLLBACK');
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const userId = userResult.rows[0].id;
    const telegramId = userResult.rows[0].telegram_id;

    const points = parseInt(process.env.POINTS_PER_DEVICE || 50);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    await client.query(
      'UPDATE users SET points = points + $1 WHERE id = $2',
      [points, userId]
    );

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
    const deviceResult = await client.query(
      `INSERT INTO devices (user_id, store_id, device_type, brand, points_earned, photo_url)
       VALUES ($1, $2, $3, $4, $5, $6)
       RETURNING *`,
      [userId, req.user.store_id, device_type, brand, points, photo_url]
    );

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    await client.query(
      `INSERT INTO transactions (user_id, store_id, type, points, description, cashier_id)
       VALUES ($1, $2, 'device_return', $3, $4, $5)`,
      [
        userId,
        req.user.store_id,
        points,
        `–°–¥–∞—á–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${device_type || '–≤–µ–π–ø'} ${brand || ''}`,
        req.user.id
      ]
    );

    // –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await client.query(
      `INSERT INTO notifications (user_id, title, message, type)
       VALUES ($1, $2, $3, $4)`,
      [
        userId,
        '–ë–∞–ª–ª—ã –∑–∞ —É—Ç–∏–ª–∏–∑–∞—Ü–∏—é! ‚ôªÔ∏è',
        `–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${points} –±–∞–ª–ª–æ–≤ –∑–∞ —Å–¥–∞—á—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞`,
        'points_earned'
      ]
    );

    await client.query('COMMIT');

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
    sendNotification(
      telegramId,
      `‚ôªÔ∏è –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–±–æ—Ç—É –æ–± —ç–∫–æ–ª–æ–≥–∏–∏!\n\nüí∞ +${points} –±–∞–ª–ª–æ–≤ –∑–∞ —Å–¥–∞—á—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n\nüì± –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –±–∞–ª–∞–Ω—Å`
    );

    res.json({
      success: true,
      device: deviceResult.rows[0],
      points_earned: points
    });
  } catch (error) {
    await client.query('ROLLBACK');
    console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –∑–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  } finally {
    client.release();
  }
});

module.exports = router;
