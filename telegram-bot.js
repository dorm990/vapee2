const TelegramBot = require('node-telegram-bot-api');
const db = require('../config/database');
require('dotenv').config();

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from.id;
  const firstName = msg.from.first_name;
  const lastName = msg.from.last_name || '';
  const username = msg.from.username || '';

  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userCheck = await db.query(
      'SELECT * FROM users WHERE telegram_id = $1',
      [telegramId]
    );

    if (userCheck.rows.length === 0) {
      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await db.query(
        `INSERT INTO users (telegram_id, first_name, last_name, username, role) 
         VALUES ($1, $2, $3, $4, $5)`,
        [telegramId, firstName, lastName, username, 'client']
      );
    }

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: process.env.TELEGRAM_WEBAPP_URL } }],
        [{ text: 'üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å', callback_data: 'balance' }],
        [{ text: 'üéÅ –ö–∞—Ç–∞–ª–æ–≥ –Ω–∞–≥—Ä–∞–¥', callback_data: 'rewards' }],
        [{ text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }]
      ]
    };

    await bot.sendMessage(
      chatId,
      `üëã –ü—Ä–∏–≤–µ—Ç, ${firstName}!\n\n` +
      `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –≤–µ–π–ø–æ–≤! üå±\n\n` +
      `üîπ –ü–æ–ª—É—á–∞–π—Ç–µ –±–∞–ª–ª—ã –∑–∞ –ø–æ–∫—É–ø–∫–∏\n` +
      `üîπ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ —Å–¥–∞—á—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n` +
      `üîπ –û–±–º–µ–Ω–∏–≤–∞–π—Ç–µ –±–∞–ª–ª—ã –Ω–∞ –Ω–∞–≥—Ä–∞–¥—ã\n\n` +
      `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:`,
      { reply_markup: keyboard }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ /start:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const telegramId = query.from.id;
  const data = query.data;

  try {
    switch (data) {
      case 'balance':
        const userBalance = await db.query(
          'SELECT points FROM users WHERE telegram_id = $1',
          [telegramId]
        );
        
        if (userBalance.rows.length > 0) {
          await bot.sendMessage(
            chatId,
            `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${userBalance.rows[0].points} –±–∞–ª–ª–æ–≤`
          );
        }
        break;

      case 'rewards':
        const rewards = await db.query(
          'SELECT title, points_cost FROM rewards WHERE is_active = true ORDER BY points_cost LIMIT 5'
        );
        
        let rewardsText = 'üéÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:\n\n';
        rewards.rows.forEach(reward => {
          rewardsText += `‚Ä¢ ${reward.title} - ${reward.points_cost} –±–∞–ª–ª–æ–≤\n`;
        });
        rewardsText += '\nüì± –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π';
        
        await bot.sendMessage(chatId, rewardsText);
        break;

      case 'help':
        await bot.sendMessage(
          chatId,
          `‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n\n` +
          `1Ô∏è‚É£ –°–æ–≤–µ—Ä—à–∞–π—Ç–µ –ø–æ–∫—É–ø–∫–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–∞–ª–ª—ã\n` +
          `2Ô∏è‚É£ –°–¥–∞–≤–∞–π—Ç–µ —Å—Ç–∞—Ä—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã\n` +
          `3Ô∏è‚É£ –û–±–º–µ–Ω–∏–≤–∞–π—Ç–µ –±–∞–ª–ª—ã –Ω–∞ –ø—Ä–∏–∑—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ\n\n` +
          `üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: support@vape-loyalty.com`
        );
        break;
    }

    await bot.answerCallbackQuery(query.id);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ callback_query:', error);
    await bot.answerCallbackQuery(query.id, { text: '‚ùå –û—à–∏–±–∫–∞' });
  }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async function sendNotification(telegramId, message) {
  try {
    await bot.sendMessage(telegramId, message);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
  }
}

module.exports = { bot, sendNotification };
